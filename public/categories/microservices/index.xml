<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservices on 黑光技术</title>
    <link>http://www.helight.cn/categories/microservices/</link>
    <description>Recent content in microservices on 黑光技术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 10 Dec 2021 08:45:20 +0800</lastBuildDate><atom:link href="http://www.helight.cn/categories/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我们是否真的需要使用服务网格？</title>
      <link>http://www.helight.cn/blog/2021/need-service-mesh/</link>
      <pubDate>Fri, 10 Dec 2021 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2021/need-service-mesh/</guid>
      <description>译者注：本文作者是 Tigera 产品总监 Phil DiCorpo ，原文地址在这里。作者介绍服务网格的价值和架构设计，并且分析了目前服务网格在落地上挑战点，这些都是非常有价值</description>
    </item>
    
    <item>
      <title>云原生架构中 Kubernetes 可观测性的挑战和解决思路</title>
      <link>http://www.helight.cn/blog/2021/kubernetes-observability/</link>
      <pubDate>Sat, 27 Nov 2021 21:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2021/kubernetes-observability/</guid>
      <description>前言 本文是一篇翻译的文章，主要是学习，原文地址在这里. 这篇文章是 Calico 公司的员工写的，思路非常好。可观测性即代码，非常 k8s 范。在我们实际应用中，目</description>
    </item>
    
    <item>
      <title>必须知道的 Kubernetes 设计模式 Top 10</title>
      <link>http://www.helight.cn/blog/2021/kubernetes-design-patterns/</link>
      <pubDate>Sat, 27 Nov 2021 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2021/kubernetes-design-patterns/</guid>
      <description>前言 本文是一篇翻译的文章，主要是学习，原文地址在这里. 这篇文章是对 redhat 写的一本书的概述，提炼了很多核心概念。 这篇文章中介绍了和传统《设计模式》</description>
    </item>
    
    <item>
      <title>关于微服务开发平台的思考</title>
      <link>http://www.helight.cn/blog/2021/ms-thinking/</link>
      <pubDate>Sun, 11 Apr 2021 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2021/ms-thinking/</guid>
      <description>引子 这是一个内部分享会上的一个小分享，整个分享只有6分钟，整理了一下分享出来。这是一个内部分享会上的一个小分享，整个分享只有6分钟，整理了一</description>
    </item>
    
    <item>
      <title>envoy filter 开发实践系列 4：envoy filter 原理介绍</title>
      <link>http://www.helight.cn/blog/2020/build-envoy-filter-what/</link>
      <pubDate>Tue, 20 Oct 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/build-envoy-filter-what/</guid>
      <description>1. 前言 在本篇开始我逐步梳理 envoy filter 2. 使用官方 docker 编译镜像来编译 5. 总结 从目前交流的情况来看 envoy 的编译确实是一个大问题，编译环境配置还是比较复杂的，开发</description>
    </item>
    
    <item>
      <title>envoy filter 开发实践系列 3：编译 envoy 的其它方式</title>
      <link>http://www.helight.cn/blog/2020/build-envoy-filter-clang/</link>
      <pubDate>Tue, 13 Oct 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/build-envoy-filter-clang/</guid>
      <description>1. 前言 前天早上开会还说这个 envoy 1.16 不知道什么时候发布，我们需要的几个新特性都在这个版本中，今天一看已经发布了，所以今天又测试了一波 1.16 上的例子。 2.</description>
    </item>
    
    <item>
      <title>envoy filter 开发实践系列 2：官网 http filter 示例编译测试</title>
      <link>http://www.helight.cn/blog/2020/build-envoy-filter-http/</link>
      <pubDate>Wed, 30 Sep 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/build-envoy-filter-http/</guid>
      <description>1.前言 这篇文章开始来介绍官网中 http filter 的编译和测试过程，让大家能够知道怎么测试跑通这个例子，虽然官网已经给了代码，但是对于新手来说，这个例子虽</description>
    </item>
    
    <item>
      <title>envoy filter 开发实践系列 1：官网 echo filter 示例编译测试</title>
      <link>http://www.helight.cn/blog/2020/build-envoy-filter-echo/</link>
      <pubDate>Sun, 20 Sep 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/build-envoy-filter-echo/</guid>
      <description>1. 前言 早就想写一个 envoy filter 开发的文章了，本来在我的 issue 中列了一篇 Venil Noronha 写的文章，想翻译来的，但是感觉那篇文章太简单了，而且没有实际操作过程，让我这种</description>
    </item>
    
    <item>
      <title>k8s 代码走读---client-go 编程交互代码测试</title>
      <link>http://www.helight.cn/blog/2020/kube-client-go-code-3/</link>
      <pubDate>Thu, 20 Aug 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/kube-client-go-code-3/</guid>
      <description>这部分还是以 client-go 为基础的代码测试，今天这里分享的一个是我测试过的 client-go 代码例子</description>
    </item>
    
    <item>
      <title>k8s 代码走读---client-go 编程之 informers</title>
      <link>http://www.helight.cn/blog/2020/kube-client-go-code-2/</link>
      <pubDate>Fri, 14 Aug 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/kube-client-go-code-2/</guid>
      <description>前言 根据我们社区制定的计划，本周是开始走读 client-go 中的 informers 模块了，但是无奈这周时间是相当的不充裕，公司内的事情也突然多了几当子要紧急赶工的事情，另外</description>
    </item>
    
    <item>
      <title>k8s 代码走读---client-go 编程交互基础走读</title>
      <link>http://www.helight.cn/blog/2020/kube-client-go-code-1/</link>
      <pubDate>Sat, 08 Aug 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/kube-client-go-code-1/</guid>
      <description>前言 代码 clone 地址：https://github.com/kubernetes/client-go。实际上在 kubernetes 的源码中也包含了这部分代码：ven</description>
    </item>
    
    <item>
      <title>k8s代码走读---kube-controller-manager</title>
      <link>http://www.helight.cn/blog/2020/kube-controller-manager-code-1/</link>
      <pubDate>Thu, 30 Jul 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/kube-controller-manager-code-1/</guid>
      <description>前言 今天开始走读 k8s 的代码，首先选择的是 controller-manager 这个组件。这几天也看了《kubernetes源码剖析》的前两章，这本书还是不错的，推荐大家阅读。前面</description>
    </item>
    
    <item>
      <title>【dbaplus社群】线上分享-游戏数据应用的DevOps建设</title>
      <link>http://www.helight.cn/blog/2020/dbaplus_show/</link>
      <pubDate>Sun, 12 Jul 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/dbaplus_show/</guid>
      <description>前言 前段时间本号作为【dbaplus社群】的合作媒体，和他们做了一次大数据领域的话题宣传活动。聊了之后就邀请我来分享一下游戏数据领域内的相关</description>
    </item>
    
    <item>
      <title>做 API 监控有没有什么方法论？</title>
      <link>http://www.helight.cn/blog/2020/api-traffic-formulas/</link>
      <pubDate>Sun, 07 Jun 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/api-traffic-formulas/</guid>
      <description>做事情还是的有一定的方法论来指导的，今天这里总结的这篇文章目的就在于对 API 的监控方面进行梳理，梳理出了 API 监控的基本层次，常用指标和常见的监控模型。</description>
    </item>
    
    <item>
      <title>ServiceMesh入门的起点：构建一个微服务网关</title>
      <link>http://www.helight.cn/blog/2020/getting-started-with-a-service-mesh-starts-with-a-gateway/</link>
      <pubDate>Sun, 24 May 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/getting-started-with-a-service-mesh-starts-with-a-gateway/</guid>
      <description>本文是在看了国外 Solo 公司 CTO 的博客之后整理的，本来也是想按原文翻译，但是考虑到我自己在公司实践的思路，还是想把他的思路和我自己的思路做一些结合。</description>
    </item>
    
    <item>
      <title>如何为 Envoy 构建一个控制面来管理集群网络流量</title>
      <link>http://www.helight.cn/blog/2020/building-a-control-plane-to-manage-envoy/</link>
      <pubDate>Sun, 10 May 2020 08:45:20 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/building-a-control-plane-to-manage-envoy/</guid>
      <description>这篇文章我看了之后非常想翻译，为什么呢？一方面我也在学习 Envoy，并且在公司的实际项目中使用 Envoy，另一方面，我确实也在设计一个控制管理端来统一管控多个集群的所有流量，没错我说的是所有的流量管控。</description>
    </item>
    
    <item>
      <title>对微服务的一些思考---微服务架构下的挑战和应对策略</title>
      <link>http://www.helight.cn/blog/2020/what-i-think-about-ms-2/</link>
      <pubDate>Sun, 03 May 2020 20:57:42 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/what-i-think-about-ms-2/</guid>
      <description>上一篇中梳理介绍了微服务架构的特点和优势，也明确说微服务架构是现代软件开发中解决生产力的一种模式。微服务可以大家加速现代企业中软件开发效率、软件稳定性，扩展性。</description>
    </item>
    
    <item>
      <title>对微服务的一些思考---微服务架构的特点和优势</title>
      <link>http://www.helight.cn/blog/2020/what-i-think-about-ms/</link>
      <pubDate>Sun, 12 Apr 2020 22:57:42 +0800</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/what-i-think-about-ms/</guid>
      <description>根据这段时间读的书想梳理一下我对微服务的一些思考，部分内容来自一些外文书籍，我感觉这部分内容还是要直接读外文书籍会得到更真实可靠的思路和解读。</description>
    </item>
    
    <item>
      <title>微服务的架构适合你吗？微服务为何而来？</title>
      <link>http://www.helight.cn/blog/2020/what-microservie-should-be/</link>
      <pubDate>Sat, 28 Mar 2020 18:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/what-microservie-should-be/</guid>
      <description>最近拾起了基本英文的讲微服务的书，一方面是学习英文，一方面也是想原汁原味的了解一下外国人口中的微服务是怎么样的。所以这篇文章是想聊聊微服务，聊聊我眼中的微服务，和实践微服务中的一些经历。也是这么多年实践微服务的一些思考。</description>
    </item>
    
    <item>
      <title>【译】发布可扩展和改进的 webassembly hub，帮助 envoy 和 Istio 使用 webassembly 的能力</title>
      <link>http://www.helight.cn/blog/2020/wasm-to-envoy-and-istio/</link>
      <pubDate>Fri, 13 Mar 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/wasm-to-envoy-and-istio/</guid>
      <description>就像用户们都想采用基于 Envoy 的基础设施来解决微服务通信带来的挑战，他们都不可避免的呃发现他们必须开发一些定制的技术功能来适配解决内部的限制性问题。</description>
    </item>
    
    <item>
      <title>【译】重新定义代理的扩展性：介绍 Envoy 和 Istio 中的 WebAssembly 应用</title>
      <link>http://www.helight.cn/blog/2020/introducing-wasm-to-envoy-and-istio/</link>
      <pubDate>Sat, 07 Mar 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/introducing-wasm-to-envoy-and-istio/</guid>
      <description>翻译 Istio 官网 blog 文章，原文：https://istio.io/blog/2020/wasm-announce/。 翻译几天了，不过官网git提交有</description>
    </item>
    
    <item>
      <title>【译】2020 年的 Istio - 顺风而行</title>
      <link>http://www.helight.cn/blog/2020/tradewinds-2020/</link>
      <pubDate>Fri, 06 Mar 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/tradewinds-2020/</guid>
      <description>在 2020 年 Istio 有更雄伟的目标，并且很多重大工作已经在进行了，但是同时我们也坚信好的基础设施应该是“无知”的。在生产中使用 Istio 应该是一种无缝的体验。</description>
    </item>
    
    <item>
      <title>API 网关和服务网格功能定位比较</title>
      <link>http://www.helight.cn/blog/2020/service-mesh-vs-api-gateway/</link>
      <pubDate>Sat, 08 Feb 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/service-mesh-vs-api-gateway/</guid>
      <description>上一篇文章介绍了服务网格和 API 网关的使用场景和如何配合使用，这篇文章继续介绍，再把服务网格和 API 网关的区别和应用场景进行挖掘。</description>
    </item>
    
    <item>
      <title>【译】有了Service Mesh，还需要 API 网关吗？</title>
      <link>http://www.helight.cn/blog/2020/do-i-need-an-api-gateway/</link>
      <pubDate>Fri, 07 Feb 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/do-i-need-an-api-gateway/</guid>
      <description>这篇博文还是围绕 API 网关和服务网格的。虽然现在2020年了，围绕这个话题依然有大量的困惑</description>
    </item>
    
    <item>
      <title>【译】以 Istio 为例来看什么时候不要拆分微服务</title>
      <link>http://www.helight.cn/blog/2020/when-not-to-do-microservices/</link>
      <pubDate>Tue, 04 Feb 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/when-not-to-do-microservices/</guid>
      <description>&lt;p&gt;作者过去5年来都在投入和帮助团队组织进行云原生开发。优化提升团队（甚至是公司）加速软件交付的技术是严重首人员，过程甚至是技术决策的影响。在应用程序架构成为软件交付瓶颈的时候（由于人员/流程/技术等因素影响），微服务算是一种合适的解决方案，它可以快速的做出修改。但是&lt;a href=&#34;https://blog.christianposta.com/microservices/when-not-to-do-microservices/&#34;&gt;这也不是唯一的途径&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【译】Kubernetes 服务网格: Istio, Linkerd 和 Consul 大比较</title>
      <link>http://www.helight.cn/blog/2020/comparison-of-service-mesh/</link>
      <pubDate>Sun, 02 Feb 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/comparison-of-service-mesh/</guid>
      <description>&lt;p&gt;云原生应用通常是由一组运行在容器中的分布式微服务架构起来的。目前越来越多的容器应用都是基于 Kubernetes 的，Kubernetes 已经成为了容器编排的事实标准。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在minikube上安装istio并测试使用</title>
      <link>http://www.helight.cn/blog/2020/setup-istio-in-minikube/</link>
      <pubDate>Sat, 18 Jan 2020 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2020/setup-istio-in-minikube/</guid>
      <description>只有一台机器，又想玩一下 istio 怎么办呢？本文将介绍如何使用 minikube 来安装 istio。</description>
    </item>
    
    <item>
      <title>什么是ServiceMesh</title>
      <link>http://www.helight.cn/blog/2019/servicemesh-intro/</link>
      <pubDate>Sat, 07 Dec 2019 13:47:08 +0200</pubDate>
      
      <guid>http://www.helight.cn/blog/2019/servicemesh-intro/</guid>
      <description>说到istio就要先说什么是ServiceMesh，从英文直译过来就就叫做“服务网格”，这个技术大概是在10多年前就被提出来的，但是最近2年被炒的异常火热。那什么叫做ServiceMesh呢？</description>
    </item>
    
  </channel>
</rss>
